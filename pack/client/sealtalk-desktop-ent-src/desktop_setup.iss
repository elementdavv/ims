; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "SealTalk_Ent_Test"     
#define MyCompanyName "RongCloud"
#define MyAppVersion "1.0.0"
#define MyAppPublisher "RongCloud, Inc."
#define MyAppURL "http://120.26.42.225:8080/sealtalk/"
#define MyAppExeName "SealTalk_Ent_Test.exe"     
#define UninstallName "Uninstall"
#define BaseDir "D:\git\ims\pack\client\sealtalk-desktop-ent-src"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{13D9ED45-766A-4864-8EA9-1739712C7C46}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppMutex={#MyAppName}
SetupMutex=SetupMutex{#SetupSetting("AppId")}
;AppVerName={#MyAppName} {#MyAppVersion}

AppPublisher={#MyAppPublisher}

AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
;DefaultDirName={pf}\{#MyAppNameEn}
DefaultDirName=D:\Program Files\{#MyCompanyName}
DisableDirPage=no
;DisableProgramGroupPage=yes
DefaultGroupName={#MyCompanyName}
LicenseFile={#BaseDir}\LICENSE
;InfoBeforeFile=E:\myWork\Electron\sealtalk-desktop-Ent\setup_info_before.txt
;InfoAfterFile=E:\myWork\Electron\sealtalk-desktop-Ent\setup_info_after.txt
OutputDir={#BaseDir}\dist
OutputBaseFilename={#MyAppName}
SetupIconFile={#BaseDir}\res\app.ico
UninstallDisplayIcon={app}\{#MyAppExeName}
Compression=lzma
SolidCompression=yes
Uninstallable=yes
;UninstallDisplayName=卸载{#MyAppName}

[Messages]
SetupAppRunningError=Setup has detected that %1 is currently running.%n%nPlease close all instances of it now, then click OK to continue, or Cancel to exit.

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}";

[Files]
Source: "{#BaseDir}\build\{#MyAppName}-win32-ia32\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#BaseDir}\build\{#MyAppName}-win32-ia32\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[InstallDelete]
Type: filesandordirs; Name: {app}\{#MyCompanyName}

[UninstallDelete]
Type: filesandordirs; Name: "{app}\{#MyCompanyName}"    
Type: filesandordirs; Name: "{app}\locales"
Type: filesandordirs; Name: "{app}\resources"

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"        
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"   
;Name: "{group}\{#UninstallName} {#MyAppName}"; Filename: "{uninstallexe}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Registry]
Root: HKCR; SubKey: sealtalk; ValueData: "SealTalk Protocol"; ValueType: string; Flags: CreateValueIfDoesntExist UninsDeleteKey;
Root: HKCR; SubKey: sealtalk; ValueName: "URL Protocol"; Flags: CreateValueIfDoesntExist; ValueType: string;
Root: HKCR; SubKey: sealtalk\DefaultIcon; ValueData: "{app}\{#MyAppExeName}"; Flags: CreateValueIfDoesntExist; ValueType: string;
Root: HKCR; SubKey: sealtalk\shell\open\command; ValueData:"{app}\{#MyAppExeName} ""%1"""; Flags: CreateValueIfDoesntExist; ValueType: string;

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent


[Code]

function IsAppRunning(const FileName : string): Boolean;
var
    FSWbemLocator: Variant;
    FWMIService   : Variant;
    FWbemObjectSet: Variant;
begin
    Result := false;
    FSWbemLocator := CreateOleObject('WBEMScripting.SWBEMLocator');
    FWMIService := FSWbemLocator.ConnectServer('', 'root\CIMV2', '', '');
    FWbemObjectSet := FWMIService.ExecQuery(Format('SELECT Name FROM Win32_Process Where Name="%s"',[FileName]));
    Result := (FWbemObjectSet.Count > 0);
    FWbemObjectSet := Unassigned;
    FWMIService := Unassigned;
    FSWbemLocator := Unassigned;
end;

function InitializeUninstall(): Boolean;
begin
  // check if application is running
  if IsAppRunning('{#MyAppExeName}') then
  begin
    MsgBox( '程序运行中，请退出后运行卸载.', mbError, MB_OK );
    Result := false;
  end
  else 
    Result := true;
End;
